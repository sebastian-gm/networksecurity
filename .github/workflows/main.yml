name: workflow

on:
  push:
    branches:
        - main
    paths-ignore:
        - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Code
          uses: actions/checkout@v3

        - name: Lint code
          run: echo "Linting repository"

        - name: Run unit test
          run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Code
          uses: actions/checkout@v3

        - name: Install Utilities
          run: |
            sudo apt-get update
            sudo apt-get install -y jq unzip
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
            IMAGE_TAG: latest
          run: |
            # Build
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

            # Push
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            # be deployed to ECS.            
            # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            # new output syntax (replaces deprecated set-output)
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuos-Deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
        # Get the code
        - name: Checkout
          uses: actions/checkout@v3

        # set up AWS credentials
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
        
        # Log in to ECR
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        # Free up disk space on the runner
        - name: Cleanup disk space
          run: |
            # remove all stopped containers
            docker rm -f $(docker ps -a -q)       || true
            # remove all unused images, build cache and volumes
            docker system prune -af               || true
            docker builder prune -af              || true
            docker volume prune -f                || true
            # show free space for diagnostics
            df -h

        # Stop & remove any old container named "networsecurity"
        - name: Stop & remove old container
          run: |
            if docker ps -a --format '{{.Names}}' | grep -xq 'networksecurity'; then
              docker rm -f networksecurity
            fi

        # Grab the image I just built
        - name: Pull latest images
          run: |
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

        # Lunch the new container
        - name: Run Docker Image to serve users
          run: |
            docker run -d \
            --name networksecurity \
            -p 8080:8000 \
            --ipc host \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            "${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
        
        # Housekeeping
        - name: Clean previous images and containers
          run: |
            docker system prune -f
